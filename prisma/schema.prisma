generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  cuid        String @id @default(cuid())
  email       String @unique
  user_role   String @default("family") // advocate, admin
  first_name  String @default("")
  middle_name String @default("")
  last_name   String @default("")
  phone       String @default("")

  AdvocateFamily Family[] @relation("advocate_family")
  Family         Family?  @relation(name: "family_member", fields: [familyCuid], references: [cuid])
  familyCuid     String?
  Pages          Page[]

  @@map("user_accounts")
}

model Family {
  cuid                  String           @id @default(cuid())
  family_name           String
  Stripe_Account_id     String?
  Stripe_Accont_cuid    String?
  FamilyMembers         User[]           @relation("family_member")
  created_at            String           @default("")
  updated_at            String           @default("")
  Pages                 Page[]
  FamilyDonations       PageDonation[]
  FamilyDonationPayouts DonationPayout[]
  advocateCuid          String           @map("advocate_cuid")
  AdvocateResponsible   User?            @relation("advocate_family", fields: [advocateCuid], references: [cuid])
  //PageDonations PageDonation[]
  //DonationPayouts DonationPayout[]
}

model DonationPayout {
  cuid             String @id @default(cuid())
  familyCuid       String @map("familly_cuid")
  pageCuid         String @map("page_cuid")
  transaction_id   String @unique
  amount           Int    @default(0)
  distributionDate String
  Family           Family @relation(fields: [familyCuid], references: cuid)
  Page             Page   @relation(fields: [pageCuid], references: cuid)
}

model Page {
  cuid                   String  @id @default(cuid())
  page_name              String
  day_of_birth           String?
  day_of_passing         String?
  visitation_date        String?
  visitation_location    String
  visitation_description String

  funeral_date        String?
  funeral_location    String
  funeral_description String

  obituary           String
  donation_goal      Int              @default(0)
  amount_raised      Int              @default(0)
  deadline           String
  userCuid           String           @map("user_cuid")
  PageDonations      PageDonation[]
  DonationPayouts    DonationPayout[]
  User               User             @relation(fields: [userCuid], references: cuid)
  Images             Image[]
  amount_distributed Int              @default(0)
  profileImageCuid   String           @map("profile_image_cuid")
  Reply              Reply[]

  Family     Family? @relation(fields: [familyCuid], references: cuid)
  familyCuid String? @map("family_cuid")

  @@map("pages")
}

model PageDonation {
  cuid           String  @id @default(cuid())
  familyCuid     String  @map("family_cuid")
  pageCuid       String  @map("page_cuid")
  donorFirstName String  @default("")
  donorLastName  String  @default("")
  comments       String  @default("")
  isAnonymous    Boolean @default(false)
  success        Boolean @default(false)
  transaction_id String  @unique
  amount         Int //In cents
  Family         Family  @relation(fields: [familyCuid], references: cuid)
  Page           Page    @relation(fields: [pageCuid], references: cuid)
  userCuid       String?

  @@map("page_donations")
}

model Reply {
  cuid       String  @id @default(cuid())
  pageCuid   String  @map("page_cuid")
  familyCuid String  @map("family_cuid")
  reply      String  @default("")
  name       String? @default("")
  Page       Page    @relation(fields: [pageCuid], references: cuid)
}

model Image {
  cuid     String  @id @default(cuid())
  url      String
  pageCuid String?
  Page     Page?   @relation(fields: [pageCuid], references: [cuid])

  @@unique([pageCuid, url])
  @@map("images")
}
