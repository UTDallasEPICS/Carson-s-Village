generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  cuid        String @id @default(cuid())
  email       String @unique
  user_role   String @default("family") // advocate, admin
  first_name  String @default("")
  middle_name String @default("")
  last_name   String @default("")
  phone       String @default("")

  Family          Family?
  familyCuid      String @default("")
  Pages           Page[]
  PageDonations   PageDonation[]
  DonationPayouts DonationPayout[]

  @@map("user_accounts")
}

model ConnectedAccount {
  cuid String @id @default(cuid())
  accountId String // Account id in Stripe in the form of (acct_XXXXXXXX)
  //account_type String // Type of connected account: i.e. Express, Standard, or Custom
  //account_status String // Active, inactive, etc.
  //accountCapabilities String[] // The abilities a user has when it comes to directly pulling out money with say a bank transfer.
  //day_of_birth String // Not needed for Stripe Connected Account?
country_of_residence String

  @@map("connected_accounts")
}

model Family {
cuid String @id @default(cuid())
//Stripe_Account ConnectedAccount?     @relation(fields: [Stripe_Account_id], references: cuid)
Stripe_Account_id String?
Stripe_Accont_cuid String?
//family_members     User[]              //@relation("family_members", fields: [family_member_cuids], references: cuid) 
family_member_cuids   String[]
family_relationship String
family_role String
created_at String @default("")
updated_at String
Pages Page[]
advocateCuid       String             @map("advocate_cuid") @unique
AdvocateResponsible User              @relation( fields: [advocateCuid], references: cuid) 

//PageDonations PageDonation[]
//DonationPayouts DonationPayout[]
}

model DonationPayout {
  cuid             String @id @default(cuid())
  familyCuid       String @map("family_cuid")
  pageCuid         String @map("page_cuid")
  transaction_id   String @unique
  amount           Int    @default(0)
  distributionDate String
  Page             Page   @relation(fields: [pageCuid], references: cuid)
  User             User   @relation(fields: [familyCuid], references: cuid)
}

model Page {
  cuid                   String @id @default(cuid())
  page_name              String
  day_of_birth           String
  day_of_passing         String
  visitation_date        String?
  visitation_location    String
  visitation_description String

  funeral_date        String?
  funeral_location    String
  funeral_description String

  obituary           String
  images             String[] // TODO: deprecate
  donation_goal      Int              @default(0)
  amount_raised      Int              @default(0)
  deadline           String
  familyCuid         String           @map("family_cuid")
  PageDonations      PageDonation[]
  DonationPayouts    DonationPayout[]
  User               User             @relation(fields: [familyCuid], references: cuid)
  Images             Image[]
  amount_distributed Int              @default(0)
  profileImageCuid   String           @map("profile_image_cuid")
  Family             Family           @relation(fields: [familiesCuid], references: cuid)
  familiesCuid       String           @map("families_cuid")

  @@map("pages")
}

model PageDonation {
  cuid           String  @id @default(cuid())
  familyCuid     String  @map("family_cuid")
  pageCuid       String  @map("page_cuid")
  success        Boolean @default(false)
  transaction_id String  @unique
  amount         Int //In cents
  Page           Page    @relation(fields: [pageCuid], references: cuid)
  User           User    @relation(fields: [familyCuid], references: cuid)

  @@map("page_donations")
}

model Image {
  cuid     String @id @default(cuid())
  url      String
  pageCuid String?
  Page     Page?   @relation(fields: [pageCuid], references: [cuid])

  //@@unique([pageCuid, url])
  @@map("images")
}
